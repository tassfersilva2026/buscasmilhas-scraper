name: scrape-capo-5partes

on:
  schedule:
    - cron: "*/30 * * * *"   # rode fracionado como preferir
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TZ: America/Sao_Paulo
    strategy:
      fail-fast: false
      matrix:
        grupo:
          - { nome: G1, trechos: "CGH-SDU,SDU-CGH,GRU-POA,POA-GRU" }
          - { nome: G2, trechos: "CGH-GIG,GIG-CGH,BSB-CGH,CGH-BSB" }
          - { nome: G3, trechos: "CGH-REC,REC-CGH,CGH-SSA,SSA-CGH" }
          - { nome: G4, trechos: "BSB-GIG,GIG-BSB,GIG-REC,REC-GIG" }
          - { nome: G5, trechos: "GIG-SSA,SSA-GIG,BSB-SDU,SDU-BSB" }

    concurrency:
      group: capo-${{ matrix.grupo.nome }}
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Chrome + Chromedriver compatível
      - uses: browser-actions/setup-chrome@v2
        with:
          install-chromedriver: true

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install selenium pandas pyarrow openpyxl webdriver-manager
          fi

      # (Opcional) Ver layout do repo para depurar
      - name: Repo layout (debug)
        run: |
          pwd
          ls -la
          echo "---- possíveis scripts ----"
          find . -maxdepth 3 -type f -name "capoviagens_scraper*.py" -print

      # Encontrar automaticamente o script correto
      - name: Find scraper script
        id: find
        shell: bash
        run: |
          set -e
          CAND=$(git ls-files | grep -E '^(.*/)?capoviagens_scraper(_gha)?\.py$' || true)
          if [ -z "$CAND" ]; then
            echo "ERRO: Não encontrei capoviagens_scraper.py nem capoviagens_scraper_gha.py no repo." >&2
            exit 1
          fi
          # pega o primeiro match
          CAND=$(echo "$CAND" | head -n1)
          echo "script=$CAND" >> $GITHUB_OUTPUT
          echo "Usando script: $CAND"

      - name: Run ${{ matrix.grupo.nome }}
        env:
          TRECHOS_CSV: ${{ matrix.grupo.trechos }}
          ADVPS_CSV: "1,5,11,17,30"
          GROUP_NAME: ${{ matrix.grupo.nome }}
          WRITE_XLSX: "0"  # deixe "1" se também quiser XLSX
        run: |
          python "${{ steps.find.outputs.script }}"

      - name: Commit artifacts
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/*.parquet data/*.xlsx 2>/dev/null || true
          git commit -m "capo ${{ matrix.grupo.nome }} $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "nada a commitar"
          git push || true
