name: scrape-flipmilhas

on:
  schedule:
    - cron: "*/60 * * * *"   # a cada 60 min (UTC)
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TZ: America/Sao_Paulo
    concurrency:
      group: scrape-commit
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Chrome + Chromedriver compatível
      - uses: browser-actions/setup-chrome@v2
        id: chrome
        with:
          install-chromedriver: true

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python -m pip install "selenium>=4.24.0" "openpyxl>=3.1.2"

      - name: Sanity check (ver versões)
        run: |
          echo "Chrome:       ${{ steps.chrome.outputs.chrome-version }}"
          echo "Chromedriver: ${{ steps.chrome.outputs.chromedriver-version }}"
          ${{ steps.chrome.outputs.chrome-path }} --version
          ${{ steps.chrome.outputs.chromedriver-path }} --version

      - name: Run scraper (gera output/FLIPMILHAS.xlsx)
        env:
          CHROME_PATH: ${{ steps.chrome.outputs.chrome-path }}
          CHROMEDRIVER_PATH: ${{ steps.chrome.outputs.chromedriver-path }}
        run: |
          python flipmilhas_scraper_gha.py --headless --once

      # === Commita XLS com timestamp em data/ e expõe um "flag" se comitou ===
      - name: Commit cópia com timestamp local em data/
        id: commit_data
        run: |
          mkdir -p data
          ts=$(date +'%Y%m%d_%H%M%S')
          # copia; se por acaso não existir (falha anterior), não quebra
          cp -f output/FLIPMILHAS.xlsx "data/FLIPMILHAS_${ts}.xlsx" || true

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add data/*.xlsx || true
          if git diff --cached --quiet; then
            echo "Sem mudanças para commitar."
            echo "did_commit=0" >> "$GITHUB_OUTPUT"
          else
            GIT_AUTHOR_DATE="$(date -R)" GIT_COMMITTER_DATE="$(date -R)" \
            git commit -m "Atualiza FLIPMILHAS.xlsx (${ts}) [localtime]"
            echo "did_commit=1" >> "$GITHUB_OUTPUT"
          fi

      - name: Pull (rebase) e Push
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          git fetch origin "$BRANCH"
          git pull --rebase origin "$BRANCH" || true
          git push origin HEAD:"$BRANCH" || true

      - name: Upload artifact (planilha)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: FLIPMILHAS-planilha
          path: output/FLIPMILHAS.xlsx

      # === Reboot do Streamlit: se não houve commit de dado, faz commit vazio ===
      - name: Trigger Streamlit redeploy (empty commit se nada mudou)
        if: ${{ success() && steps.commit_data.outputs.did_commit == '0' }}
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit --allow-empty -m "chore: trigger Streamlit redeploy ($(date -u +'%Y-%m-%dT%H:%M:%SZ'))"
          git push origin HEAD:"$BRANCH"
