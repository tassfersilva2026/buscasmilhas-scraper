name: scrape-flipmilhas

on:
  schedule:
    - cron: "0 * * * *" # a cada 60 min (UTC)
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TZ: America/Sao_Paulo
    concurrency:
      group: scrape-commit
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          ref: ${{ github.ref_name }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Instala Chrome + Chromedriver compatíveis
      - name: Setup Chrome
        id: chrome
        uses: browser-actions/setup-chrome@v2
        with:
          install-chromedriver: true

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python -m pip install "selenium>=4.24.0" "openpyxl>=3.1.2"

      - name: Sanity check (versions)
        run: |
          echo "Chrome:       ${{ steps.chrome.outputs.chrome-version }}"
          echo "Chromedriver: ${{ steps.chrome.outputs.chromedriver-version }}"
          ${{ steps.chrome.outputs.chrome-path }} --version
          which chromedriver || true
          chromedriver --version

      - name: Run scraper (gera output/FLIPMILHAS.xlsx)
        env:
          CHROME_PATH: ${{ steps.chrome.outputs.chrome-path }}
          # Opcional: deixe o Selenium resolver via PATH; se quiser forçar, mantenha a linha abaixo
          CHROMEDRIVER_PATH: ${{ steps.chrome.outputs.chromedriver-path }}
        run: |
          python flipmilhas_scraper_gha.py --headless --once

      - name: Pull (rebase)
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch origin "$BRANCH"
          git checkout "$BRANCH"
          git pull --rebase origin "$BRANCH" || git reset --hard "origin/$BRANCH"

      - name: Commit cópia com timestamp em data/
        id: commit_data
        run: |
          mkdir -p data
          ts=$(date +'%Y%m%d_%H%M%S')
          cp -f output/FLIPMILHAS.xlsx "data/FLIPMILHAS_${ts}.xlsx" || true

          git add data/*.xlsx || true
          if git diff --cached --quiet; then
            echo "did_commit=0" >> "$GITHUB_OUTPUT"
            echo "Sem mudanças para commitar."
          else
            git commit -m "Atualiza FLIPMILHAS.xlsx (${ts}) [localtime]"
            echo "did_commit=1" >> "$GITHUB_OUTPUT"
          fi

      - name: Push
        if: ${{ steps.commit_data.outputs.did_commit == '1' }}
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          git push origin HEAD:"$BRANCH"

      - name: Upload artifact (planilha)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: FLIPMILHAS-planilha
          path: output/FLIPMILHAS.xlsx

      - name: Trigger Streamlit redeploy (empty commit)
        if: ${{ success() && steps.commit_data.outputs.did_commit == '0' }}
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git commit --allow-empty -m "chore: trigger Streamlit redeploy ($(date -u +'%Y-%m-%dT%H:%M:%SZ'))"
          git push origin HEAD:"$BRANCH"
